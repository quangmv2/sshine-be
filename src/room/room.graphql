type Query {
    rooms(user_id: String): [Room],
    myRooms: [Room],
    roomDetail(room_id: String): Room,
}

type Mutation {
    bookRoom(input: BookRoomInput!): Room,
    sendMessage(input: NewMessage!): MessageDetail
}

type Subscription {
    listenNewMessage: MessageDetail   
}

type Room {
    id: String,
    time_start: Float,
    time_end: Float,
    code: String,
    note: String,
    user_customer_id: User,
    user_id: User,
    createdAt: Float,
    updatedAt: Float
}

input BookRoomInput {
    time_start: Int!,
    time_end: Int!,
    note: String,
    user_id: String!,
}


enum TypeMessage {
    quote,
    send
}

enum StatusMessage {
    Send,
    Delivered,
    Seen
}

input NewMessage {
    content: String!,
    type: TypeMessage,
    to: String 
}

type MessageDetail {
    id: String,
    type: TypeMessage,
    content: String,
    status: StatusMessage,
    from: User,
    to: Room
}

# type MyMessages {
#     messageLast: MessageDetail,
#     user: User
# }